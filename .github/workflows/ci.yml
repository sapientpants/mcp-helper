name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTFLAGS: "-D warnings"

jobs:
  # Main test job - runs on multiple platforms
  test:
    name: Test - ${{ matrix.os }} / ${{ matrix.rust }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
        include:
          # Test on explicit Rust version we use for releases
          # We manually update this when we want to use newer features
          - os: ubuntu-latest
            rust: "1.88.0"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}
        cache-all-crates: true
        cache-on-failure: true

    - name: Check formatting
      run: make fmt-check
      if: matrix.rust == 'stable'

    - name: Run linter
      run: make lint
      if: matrix.rust == 'stable'

    - name: Build
      run: make build

    - name: Run tests
      run: make test

  # Comprehensive CI job - runs all checks including coverage
  ci-full:
    name: Full CI Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-all-crates: true
        cache-on-failure: true

    # Use cargo-binstall for faster tool installation
    # This reduces installation time from ~4-5 minutes to ~20-30 seconds
    - name: Install cargo-binstall
      uses: cargo-bins/cargo-binstall@main

    - name: Install CI tools
      run: |
        cargo binstall --no-confirm --force cargo-audit cargo-tarpaulin

    - name: Run full CI suite
      run: make ci

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: tarpaulin-report.html
        retention-days: 7

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./tarpaulin-report.html
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  # Build release binaries for distribution
  release-build:
    name: Release Build - ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            
          - os: macos-latest
            target: x86_64-apple-darwin
            
          - os: macos-latest
            target: aarch64-apple-darwin

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.88.0
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}
        cache-all-crates: true

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Archive binary (Unix)
      if: runner.os != 'Windows'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ../../../mcp-helper-${{ matrix.target }}.tar.gz mcp-helper
        cd ../../../
        echo "ASSET_PATH=mcp-helper-${{ matrix.target }}.tar.gz" >> $GITHUB_ENV

    - name: Archive binary (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../mcp-helper-${{ matrix.target }}.zip mcp-helper.exe
        cd ../../../
        echo "ASSET_PATH=mcp-helper-${{ matrix.target }}.zip" >> $GITHUB_ENV

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mcp-helper-${{ matrix.target }}
        path: ${{ env.ASSET_PATH }}
        retention-days: 7

  # Create release when pushing a version tag
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, ci-full, release-build]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: mcp-helper-*
        merge-multiple: true

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          mcp-helper-*.tar.gz
          mcp-helper-*.zip
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}